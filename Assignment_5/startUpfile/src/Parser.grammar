Token regular expression

int         = [0-9]+
identifier  = [a-zA-Z][a-zA-Z0-9_]*
newline     = \n
whitespace  = [ \t\r]+
linecomment = "##".*
blkcomment  = "#{"[^]*"}#"

"func"            FUNC    
"call"            CALL    
"return"          RETURN  
"var"             VAR     
"if"              IF      
"else"            ELSE    
"{"               BEGIN   
"}"               END     
"while"           WHILE   
"("               LPAREN  
")"               RPAREN  
"int"             INT     
"bool"            BOOL    
"print"           PRINT   
"<-"              ASSIGN  
"->"              FUNCRET 
"+"               ADD     
"-"               SUB     
"*"               MUL     
"/"               DIV     
"%"               MOD     
"and"             AND     
"or"              OR      
"not"             NOT     
"<"               LT      
">"               GT      
"<="              LE      
">="              GE      
"="               EQ      
"!="              NE      
";"               SEMI    
","               COMMA   
"true"|"false"    BOOL_LIT
{int}             INT_LIT 
{identifier}      IDENT   

======================================================================================================
mini-C context-free grammar

%right  ASSIGN
%left   OR
%left   AND
%right  NOT
%left   EQ      NE
%left   LE      LT      GE      GT
%left   ADD     SUB
%left   MUL     DIV     MOD

program        ->  decl_list
decl_list      ->  decl_list  decl  |  eps
decl           ->  fun_decl
fun_decl       ->  FUNC  IDENT  LPAREN  params  RPAREN  FUNCRET  prim_type  BEGIN  local_decls  stmt_list  END  
params         ->  param_list  |  eps
param_list     ->  param_list  COMMA  param  |  param
param          ->  VAR  type_spec  IDENT
type_spec      ->  prim_type
prim_type      ->  INT  | BOOL
local_decls    ->  local_decls  local_decl  |  eps
local_decl     ->  VAR  type_spec  IDENT  SEMI
stmt_list      ->  stmt_list  stmt  |  eps
stmt           ->  assign_stmt  |  print_stmt  |  return_stmt  |  if_stmt  |  while_stmt  |  compound_stmt
assign_stmt    ->  IDENT  ASSIGN  expr  SEMI
print_stmt     ->  PRINT  expr  SEMI
return_stmt    ->  RETURN  expr  SEMI
if_stmt        ->  IF  LPAREN  expr  RPAREN  stmt  ELSE  stmt
while_stmt     ->  WHILE  LPAREN  expr  RPAREN  stmt
compound_stmt  ->  BEGIN  local_decls  stmt_list  END
args           ->  arg_list  |  eps
arg_list       ->  arg_list  COMMA  expr  | expr
expr           ->  expr  ADD  expr  | expr  SUB  expr  | expr  MUL  expr  | expr  DIV  expr  | expr  MOD  expr
                |  expr  EQ   expr  | expr  NE   expr  | expr  LE   expr  | expr  LT   expr  | expr  GE   expr  | expr  GT  expr
                |  expr  AND  expr  | expr  OR   expr  | NOT  expr
                |  LPAREN  expr  RPAREN
                |  IDENT  |  INT_LIT  |  BOOL_LIT
                |  CALL  IDENT  LPAREN  args  RPAREN


========================================================================================================================
Hint for the return types of non-terminal functions to build parse tree

program         =>      Program
decl_list       => List<FuncDecl>
decl            =>      FuncDecl
fun_decl        =>      FuncDecl
params          => List<Param>
param_list      => List<Param>
param           =>      Param
type_spec       =>      TypeSpec
prim_type       =>      TypeSpec
local_decls     => List<LocalDecl>
local_decl      =>      LocalDecl
stmt_list       => List<Stmt>
stmt            =>      Stmt
assign_stmt     =>      AssignStmt              --
print_stmt      =>      PrintStmt
return_stmt     =>      ReturnStmt
if_stmt         =>      IfStmt
while_stmt      =>      WhileStmt
compound_stmt   =>      CompoundStmt
args            => List<Arg>
arg_list        => List<Arg>
expr            =>      classes derived from Expr
                            : ExprAdd, ExprSub, ExprMul, ExprDiv, ExprMod,
                              ExprEq, ExprNe, ExprLe, ExprLt, ExprGe, ExprGt,
                              ExprAnd, ExprOr, ExprNot,
                              ExprParen,
                              ExprIdent, ExprIntLit, ExprBoolLit,
                              ExprCall
